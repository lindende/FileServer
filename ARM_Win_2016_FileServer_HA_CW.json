{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "customer": {
      "type": "string",
      "defaultValue": "",
      "minLength": 1,
      "maxLength": 3,
      "metadata": {
        "description": "Name or abbreviation for the customer."
      }
    },
    "vmAdminUsername": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the administrator of the new VM and the domain. Exclusion list: 'admin','administrator"
      }
    },
    "vmAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password for the administrator account of the new VM and the domain"
      }
    },
    "applicationName": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 5,
      "metadata": {
        "description": "enter the application / services name."
      }
    },
    "applicationRole1": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 3,
      "metadata": {
        "description": "The application role belonging to the application."
      }
    },
    "domainUsername": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Username of the account used to join machines to the domain."
      }
    },
    "domainPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password of the account."
      }
    },
    "domainToJoin": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The FQDN of the AD Domain created "
      }
    },
    "ouPath": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies an organizational unit (OU) for the machines to be placed in. Enter the full distinguished name of the OU in quotation marks. Example: 'OU=testOU; DC=domain; DC=Domain; DC=com"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "d",
      "allowedValues": [ "d", "t", "a", "p", "dt", "ap", "dtap" ],
      "metadata": {
        "description": "The environment denotation.d=Development, t=Test, a=Acceptance, p=Production, dt=Dev-Test, ap=Acceptance-Production"
      }
    },
    "zone": {
      "type": "string",
      "defaultValue": "e",
      "allowedValues": [ "e", "i", "p", "m" ],
      "metadata": {
        "description": "Enter abbreviation for Zone. e=External, i=Internal, p=Production, m=Management"
      }
    },
    "tier": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [ "f", "b", "d" ],
      "metadata": {
        "description": "enter the appropriate tier for subNet"
      }
    },
    "vnetEnvironment": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [ "d", "t", "a", "p", "dt", "ap", "dtap" ],
      "metadata": {
        "description": "enter environment for the deployment. input format - d=development, t=test, a=acceptance, p=production, dt=devtest, ap= acceptanceproduction. "
      }
    },
    "instanceSize": {
      "type": "string",
      "defaultValue": "Standard_DS2_v2",
      "metadata": {
        "description": "Define the VMSize for the VM."
      }
    },
    "clusterName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Define the Cluster name for the Cluster."
      }
    },
    "sofsName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Define the SOFS Name for the Cluster."
      }
    },
    "shareName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Define the ShareName for the Cluster."
      }
    },
    "clusterSize": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Define the Cluster Size for the Cluster."
      }
    },
    "keyvaultEnvironment": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [ "d", "t", "a", "p", "dt", "ap", "dtap" ],
      "metadata": {
        "description": "enter environment for the Keyvault. input format - d=development, t=test, a=acceptance, p=production, dt=devtest, ap= acceptanceproduction. "
      }
    },
    "aadClientID": {
      "type": "string",
      "metadata": {
        "description": "Client ID of AAD app which has permissions to KeyVault"
      }
    },
    "aadClientSecret": {
      "type": "securestring",
      "metadata": {
        "description": "Client Secret of AAD app which has permissions to KeyVault"
      }
    },
    "keyEncryptionKeyURL": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "URL of the KeyEncryptionKey used to encrypt the volume encryption key"
      }
    },
    "clusterIP": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Provide Cluster IP for Cluster."
      }
    },
    "privateIPRange": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Provide Private IP Range to assign to a VM."
      }
    },
    "instanceNumber": {
      "type": "int",
      "defaultValue": "",
      "metadata": {
        "description": "The number of instances"
      }
    }
  },
  "variables": {

    ////////////////////////////////////////// "FileServerCluster" ////////////////////////////

    //Dynamic Variables

    // //Provide VM Image Details  -

    "vmImage": {
      "Publisher": "MicrosoftWindowsServer",
      "Offer": "WindowsServer",
      "Sku": "2016-Datacenter" // common skus - 2008-R2-SP1, 2012-Datacenter, 2012-R2-Datacenter, 2016-Datacenter
    },

    // //Choose tier and SKU for storageacount. Cross matching premium with standard is not allowed. For blobstorage check if the region supports the selected Storage SKU.
    "storage": {
      "skuTier": "Premium",
      "skuName": "Premium_LRS", // skutype - Standard_LRS, Standard_GRS, Standard_RAGRS, Standard_ZRS, Premium_LRS
      "kind": "Storage"
    },

    //"privateIP": "10.1.8.208/28",

    // Fixed variables

    "Location": "we", //"[resourceGroup().location]",
    "storageAccountName": "[toLower(concat(parameters('customer'),'sa',parameters('applicationName'),parameters('applicationRole1'),substring(variables('storage').skuTier, 0, 1),parameters('environment')))]", //e.g. <customer>sa<application name><zone><storage tier><env><sequence number>
    "vmName": "[toLower(concat(parameters('zone'),'-',parameters('applicationName'),parameters('applicationRole1'),'-',parameters('environment')))]", // e.g. <zone>-<appl. / service name>-<environment>-<sequence number> . Note - Vm name cannot be more than 15 characters
    "vmNicName": "[toLower(concat(parameters('customer'),'-nic-',variables('vmName')))]", // e.g. <customer>-nic-<vmname>
    "vnetResourcegroup": "[toLower(concat(parameters('customer'),'-platform-vnet-',parameters('vnetEnvironment')))]", // e.g. <customer>-<category>-<application name>-<environment>
    "Vnetname": "[toLower(Concat(parameters('customer'),'-vnet-',parameters('zone'),'-',variables('Location'),'-',parameters('environment')))]", // e.g. <customer>-vnet-<zone>-<location>-<environment>
    "vnetID": "[resourceId(variables('vnetResourcegroup'),'Microsoft.Network/virtualNetworks', variables('Vnetname'))]",
    "subnetName": "[toLower(concat(parameters('tier'),'-',parameters('applicationName')))]", // e.g <tier>-<appl. / service name>
    "subnetId": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]", // e.g. VnetID/Subnets/f-infor
    "vmDNSLabelPrefix": "[toLower(concat(parameters('customer'),'-',parameters('zone'),'-',parameters('applicationName'),parameters('applicationRole1'),'-',parameters('environment')))]", // e.g. <customer>-<zone>-<appl. / service name>-<env>
    "availabilitySetName": "[toLower(concat(parameters('customer'),'-as-',parameters('applicationName'),parameters('applicationRole1'),'-',parameters('environment')))]", //<customer>-as-<appl. / service name>-<environment>
    "domainJoinOptions": "3",

    //// Keyvault Settings
    "keyVaultName": "[concat(parameters('customer'),'-kv-',parameters('keyvaultEnvironment'),'-1')]",
    "keyVaultResourceGroup": "[concat(parameters('customer'),'-platform-kv-',parameters('keyvaultEnvironment'))]",
    "keyVaultURL": "[concat('https://', variables('keyVaultName'), '.vault.azure.net/')]",
    "keyVaultResourceID": "[concat(subscription().id,'/resourceGroups/',variables('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",

    //// Disk Encryption Settings
    "volumeType": "All", // Type of the volume OS or Data or All to perform encryption operation..
    "sequenceVersion": "1.0", //Pass in an unique value like a GUID everytime the operation needs to be force run
    "updateVmUrl": "[concat('https://',parameters('customer'),'saeewtertwe3wwefrart.blob.core.windows.net/scripts/updatevm-kek.json')]",

    ////////////////////////////////////////// "FileServerCluster" - END ////////////////////////////

    ////////////////////////////////////////// FileServer-Cloud Witness /////////////////////////////

    //Dynamic Variables

    "storage2": {
      "skuTier": "Standard",
      "skuName": "Standard_LRS", // skutype - Standard_LRS, Standard_GRS, Standard_RAGRS, Standard_ZRS, Premium_LRS
      "kind": "Storage"
    },

    // Fixed variables
    "storageAccount2Name": "[toLower(concat(parameters('customer'),'sa',parameters('applicationName'),parameters('applicationRole1'),substring(variables('storage2').skuTier, 0, 1),parameters('environment')))]", //e.g. <customer>sa<application name><zone><storage tier><env><sequence number>
    "witnessStorageName": "[concat(variables('storageAccount2Name'),'cw')]",

    ////////////////////////////////////////// FileServer-Cluster-Configurations /////////////////////////////

    //"ClusterIP": "10.1.8.222",
    "vmNamePrefix": "[concat(variables('vmName'),'-')]",
    "_artifactsLocation": "[concat('https://',parameters('customer'),'saeewtertwe3wwefrart.blob.core.windows.net/scripts')]",
    "s2dPrepModulesURL": "[concat(variables('_artifactsLocation'),'/PrepS2D.ps1.zip')]",
    "s2dPrepFunction": "PrepS2D.ps1\\PrepS2D",
    "s2dConfigModulesURL": "[concat(variables('_artifactsLocation'),'/ConfigS2D.ps1')]"

  },
  "resources": [

    // File-cluster Resources
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "apiVersion": "2017-03-30",
      "location": "[resourceGroup().location]",
      "properties": {
        "platformFaultDomainCount": 3,
        "platformUpdateDomainCount": 3
      },

      "sku": {
        "name": "Aligned"
      }

    },
    //// diagnostic storage account
    {
      "apiVersion": "2016-01-01",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('storageAccount2Name'),'diag')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "encryption": {
          "keySource": "Microsoft.Storage",
          "services": {
            "blob": {
              "enabled": true
            }
          }
        }
      },
      "sku": {
        "name": "[variables('storage2').skuName]",
        "tier": "[variables('storage2').skuTier]"
      },
      "kind": "[variables('storage2').kind]"
    },
    //// Cloud Witness Storage Account
    {
      "apiVersion": "2016-01-01",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('storageAccount2Name'),'cw')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "encryption": {
          "keySource": "Microsoft.Storage",
          "services": {
            "blob": {
              "enabled": true
            }
          }
        }
      },
      "sku": {
        "name": "[variables('storage2').skuName]",
        "tier": "[variables('storage2').skuTier]"
      },
      "kind": "[variables('storage2').kind]"
    },
    {
      "type": "Microsoft.Compute/disks",
      "name": "[concat(variables('vmName'),'-',copyIndex(1),'-datadisk1')]",
      "apiVersion": "2016-04-30-preview",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "Copy-AzureManagedDisk",
        "count": "[parameters('instanceNumber')]"
      },
      "properties": {
        "creationData": {
          "createOption": "Empty"
        },
        "accountType": "Premium_LRS",
        "diskSizeGB": 512
      }
    },
    {
      "type": "Microsoft.Compute/disks",
      "name": "[concat(variables('vmName'),'-',copyIndex(1),'-datadisk2')]",
      "apiVersion": "2016-04-30-preview",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "Copy-AzureManagedDisk",
        "count": "[parameters('instanceNumber')]"
      },
      "properties": {
        "creationData": {
          "createOption": "Empty"
        },
        "accountType": "Premium_LRS",
        "diskSizeGB": 512
      }
    },
    //// NIC * 2
    {
      "name": "[concat(variables('vmNicName'),'-',copyIndex(1))]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "copy": {
        "name": "Copy-Nic",
        "count": "[parameters('instanceNumber')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat('ipconfig',copyIndex(1))]",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(parameters('privateIPRange'),copyindex(212))]",
              "subnet": {
                "id": "[variables('subnetId')]"
              }
            }
          }
        ]
      }
    },
    //// VM * 2
    {
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmName'),'-',copyindex(1))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "Copy-Nic",
        "[variables('availabilitySetName')]",
        "[concat(variables('storageAccount2Name'),'diag')]"
      ],
      "copy": {
        "name": "Copy-FileServer",
        "count": "[parameters('instanceNumber')]"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('instanceSize')]"
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmName'),'-',copyindex(1))]",
          "adminUsername": "[parameters('vmAdminUsername')]",
          "adminPassword": "[parameters('vmAdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('vmImage').Publisher]",
            "offer": "[variables('vmImage').Offer]",
            "sku": "[variables('vmImage').Sku]",
            "version": "latest"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          },
          "dataDisks": [
            {
              "lun": 0,
              "caching": "ReadOnly",
              "name": "[concat(variables('vmName'),'-',copyIndex(1),'-datadisk1')]",
              "createOption": "Attach",
              "managedDisk": {
                "id": "[resourceId('Microsoft.Compute/disks/', concat(variables('vmName'),'-',copyIndex(1),'-datadisk1'))]"
              }
            },
            {
              "lun": 1,
              "caching": "ReadOnly",
              "name": "[concat(variables('vmName'),'-',copyIndex(1),'-datadisk2')]",
              "createOption": "Attach",
              "managedDisk": {
                "id": "[resourceId('Microsoft.Compute/disks/', concat(variables('vmName'),'-',copyIndex(1),'-datadisk2'))]"
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('vmNicName'),'-',copyIndex(1)))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat('http://',variables('storageAccount2Name'),'diag','.blob.core.windows.net')]"
          }
        }
      }
    },
    //// Domain Join
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'),'-',copyIndex(1),'/joindomain')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "Copy-JoinDomain",
        "count": "[parameters('instanceNumber')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'),'-',copyIndex(1))]"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('domainToJoin')]",
          "OUPath": "",
          "User": "[concat(parameters('domainToJoin'),'\\', parameters('domainUsername'))]",
          "Restart": "true",
          "Options": "[variables('domainJoinOptions')]"
        },
        "protectedsettings": {
          "Password": "[parameters('domainPassword')]"
        }
      }
    },
    //// Extension - Malware
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'),'-',copyIndex(1),'/malware')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "Copy-malware",
        "count": "[parameters('instanceNumber')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/',variables('vmName'),'-',copyIndex(1),'/extensions/joindomain')]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Security",
        "type": "IaaSAntimalware",
        "typeHandlerVersion": "1.1",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "AntimalwareEnabled": true,
          "Exclusions": {
            "Paths": "",
            "Extensions": "",
            "Processes": ""
          },
          "RealtimeProtectionEnabled": "true",
          "ScheduledScanSettings": {
            "isEnabled": "true",
            "scanType": "Quick",
            "day": "4",
            "time": "120"
          }
        },
        "protectedSettings": null
      }
    },
    //// Extension - Powershell
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'),'-2/s2dPrep')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/',variables('vmName'),'-2/extensions/malware')]"
      ],
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.20",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "modulesUrl": "[variables('s2dPrepModulesURL')]",
          "configurationFunction": "[variables('s2dPrepFunction')]",
          "properties": {
            "domainName": "[parameters('domainToJoin')]",
            "adminCreds": {
              "userName": "[parameters('domainUsername')]",
              "password": "PrivateSettingsRef:adminPassword"
            }
          }
        },
        "protectedSettings": {
          "items": {
            "adminPassword": "[parameters('domainPassword')]"
          }
        }
      }
    },
    //// Extension Custom Script extension
    {
      "name": "[concat(variables('vmName'),'-1/s2dConfig')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/',variables('vmName'),'-2/extensions/s2dPrep')]",
        "[concat('Microsoft.Compute/virtualMachines/',variables('vmName'),'-1/extensions/malware')]"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.7",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[variables('s2dConfigModulesURL')]"
          ],
          "commandToExecute": "[concat('powershell.exe -ExecutionPolicy bypass -File ConfigS2D.ps1 -FQDNDomain ', parameters('domainToJoin'),' -Cred_User ', parameters('DomainUserName'), ' -Cred_Psswd ', parameters('DomainPassword'), ' -stSofsName ', parameters('sofsName'), ' -stprefix ', variables('vmNamePrefix'), ' -AccountKey ', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('witnessStorageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value , ' -StorageAccount ', variables('witnessStorageName'), ' -stinstances 2',' -StaticIP ', parameters('ClusterIP'), ' -stClsName ', parameters('clusterName'),' -stSofsShareSize ', parameters('clusterSize'),' -stSofsShare ', parameters('shareName') )]"
        }
      }
    },
    //// Extension Azure Disk Encryption
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'),'-',copyIndex(1),'/AzureDiskEncryption')]",
      "apiVersion": "2016-03-30",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "Copy-AzureDiskEncryption",
        "count": "[parameters('instanceNumber')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/',variables('vmName'),'-1/extensions/s2dConfig')]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Security",
        "type": "AzureDiskEncryption",
        "typeHandlerVersion": "1.1",
        "autoUpgradeMinorVersion": true,
        "forceUpdateTag": "[variables('sequenceVersion')]",
        "settings": {
          "AADClientID": "[parameters('aadClientID')]",
          "KeyVaultURL": "[variables('keyVaultURL')]",
          "KeyEncryptionKeyURL": "[parameters('keyEncryptionKeyURL')]",
          "KeyEncryptionAlgorithm": "RSA-OAEP",
          "VolumeType": "[variables('volumeType')]",
          "EncryptionOperation": "EnableEncryption"
        },
        "protectedSettings": {
          "AADClientSecret": "[parameters('aadClientSecret')]"
        }
      }
    },
    //// Extension Update VM
    {
      "name": "[concat('updatevm','-',copyIndex(1))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "copy": {
        "name": "Copy-updatevm",
        "count": "[parameters('instanceNumber')]"
      },
      "dependsOn": [
        "Copy-AzureDiskEncryption"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('updateVmUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vmName": {
            "value": "[concat(variables('vmName'),'-',copyIndex(1))]"
          },
          "keyVaultResourceID": {
            "value": "[variables('keyVaultResourceID')]"
          },
          "keyVaultSecretUrl": {
            "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions',concat(variables('vmName'),'-',copyIndex(1)),'AzureDiskEncryption')).instanceView.statuses[0].message]"
          },
          "keyEncryptionKeyURL": {
            "value": "[parameters('keyEncryptionKeyURL')]"
          }
        }
      }
    }
  ],
  "outputs": { }
}